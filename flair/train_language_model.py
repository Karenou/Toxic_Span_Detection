# -*- coding: utf-8 -*-
"""Flair.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SgXYEc70Dfiyx7aNXNBh4dwd4wT9VXOw
"""

"""## Train Flair models: news-forward"""

from torch.optim.sgd import SGD

from flair.data import Dictionary
from flair.embeddings import FlairEmbeddings
from flair.trainers.language_model_trainer import LanguageModelTrainer, TextCorpus

import argparse
import os


def train_model(base_path, model):
    """
    train a flair language model
    @param base_path: base path of the corpus and langauge model
    @param model: name of the language model, news-forward or news-backward
    """

    # instantiate an existing LM, such as one from the FlairEmbeddings
    language_model = FlairEmbeddings(model).lm

    # are you fine-tuning a forward or backward LM?
    is_forward_lm = language_model.is_forward_lm

    # get the dictionary from the existing language model
    dictionary: Dictionary = language_model.dictionary

    # get the corpus, process forward and at the character level
    print("Get corpus")
    corpus = TextCorpus("%s/corpus" % base_path, dictionary, is_forward_lm, character_level=True)

    # use the model trainer to fine-tune this model on the toxic corpus
    trainer = LanguageModelTrainer(language_model, corpus, optimizer=SGD)

    print("Train language model %s" % model)
    trainer.train("%s/language_model/%s" % (base_path, model),
                sequence_length=250,
                mini_batch_size=500,
                learning_rate=20,
                max_epochs=7,
                patience=2,
                checkpoint=False)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--model", type=str, required=True, help="name of the language model")
    parser.add_argument("--base_path", type=str, required=True, help="name of the base_path")
    args = parser.parse_args()

    if not os.path.exists("%s/language_model/%s" % (args.base_path, args.model)):
        os.mkdir("%s/language_model/%s" % (args.base_path, args.model))

    train_model(args.base_path, args.model)
